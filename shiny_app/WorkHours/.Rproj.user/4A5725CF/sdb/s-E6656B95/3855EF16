{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nmin_day <<- Sys.Date()\nmax_day <<- as.Date(\"2026-01-01\")\n\n## Danish National Holidays that appear on a weekday:\n## -----------------------------------------------------\n## New Years Day (Jan 1)\nNew_Years_Days         <- data.frame(  date=as.Date( c(\"2016-01-01\",\"2018-01-01\", \n                                                \"2019-01-01\",\"2020-01-01\",\"2021-01-01\",\n                                                \"2024-01-01\",\"2025-01-01\") ),\n                                       holiday=\"New Years Day\"  )\n## Maundy Thursday \nMaundy_Thursdays       <- data.frame(  date=as.Date( c(\"2016-03-24\",\"2017-04-13\",\"2018-03-29\", \n                                                  \"2019-04-18\",\"2020-04-09\",\"2021-04-01\",\"2022-04-14\",\"2023-04-06\",\"2024-03-28\",\n                                                  \"2025-04-17\") ),\n                                       holiday=\"Maundy Thursday\")\n## Good Friday \nGood_Fridays          <- data.frame(   date=as.Date( c(\"2016-03-25\",\"2017-04-14\",\"2018-03-30\", \n                                              \"2019-04-19\",\"2020-04-10\",\"2021-04-02\",\n                                              \"2022-04-15\",\"2023-04-07\",\"2024-03-29\",\"2025-04-18\") ),\n                                       holiday=\"Good Friday\")\n## Easter Monday \nEaster_Mondays        <- data.frame(   date=as.Date( c(\"2016-03-28\",\"2017-04-17\",\"2018-04-02\", \n                                                \"2019-04-22\",\"2020-04-13\",\"2021-04-05\",\n                                                \"2022-04-18\",\"2023-04-10\",\"2024-04-01\",\n                                                \"2025-04-21\")),\n                                       holiday=\"Easter Monday\")\n## Prayer Day \nPrayer_Days           <- data.frame(   date=as.Date( c(\"2016-04-22\",\"2017-05-12\",\"2018-04-27\", \n                                             \"2019-05-17\",\"2020-05-08\",\"2021-04-30\",\n                                             \"2022-05-13\",\"2023-05-05\",\"2024-04-26\",\n                                             \"2025-05-16\")),\n                                        holiday=\"Prayer Day\")\n## Christ's Ascension \nCA_Days               <- data.frame(    date=as.Date( c(\"2016-05-05\",\"2017-05-25\",\"2018-05-10\", \n                                         \"2019-05-30\",\"2020-05-21\",\"2021-05-13\",\n                                         \"2022-05-26\",\"2023-05-18\",\"2024-05-09\",\n                                         \"2025-05-29\")),\n                                        holiday=\"Christ's Ascension\")\n## Whit Monday\nWhit_Mondays          <- data.frame(    date=as.Date( c(\"2016-05-16\",\"2017-06-05\",\"2018-05-21\", \n                                              \"2019-06-10\",\"2020-06-01\",\"2021-05-24\",\n                                              \"2022-06-06\",\"2023-05-29\",\"2024-05-20\",\n                                              \"2025-06-09\")),\n                                        holiday=\"Whit Monday\")\n## Christmas Eve Day (Dec 24)\nChristmas_Eve_Days    <- data.frame(    date=as.Date( c(\"2015-12-24\",\"2018-12-24\", \n                                                    \"2019-12-24\",\"2020-12-24\",\"2021-12-24\",\n                                                    \"2024-12-24\", \"2025-12-24\")),\n                                        holiday=\"Christmas Eve Day\")\n## Christmas Day (Dec 25)\nChristmas_Days        <- data.frame(    date=as.Date( c(\"2015-12-25\",\"2017-12-25\",\"2018-12-25\", \n                                                \"2019-12-25\",\"2020-12-25\",\"2023-12-25\",\"2024-12-25\",\n                                                \"2025-12-25\")),\n                                        holiday=\"Christmas Day\")\n\n## Second Day of Christmas (Dec 26)\nSecond_Christmas_Days <- data.frame(    date=as.Date( c(\"2016-12-26\",\"2017-12-26\",\"2018-12-26\", \n                                                       \"2019-12-26\",\"2022-12-26\",\"2023-12-26\",\n                                                       \"2024-12-26\",\"2025-12-26\")),\n                                        holiday=\"Second Day of Christmas\")\n\nDK_holidays_on_weekdays <- rbind(New_Years_Days, \n                                 Maundy_Thursdays,\n                                 Good_Fridays,\n                                 Easter_Mondays,\n                                 Prayer_Days,\n                                 CA_Days,\n                                 Whit_Mondays,\n                                 Christmas_Eve_Days,\n                                 Christmas_Days,\n                                 Second_Christmas_Days)\n\ncWorkhours <- function(pPeriodStart=min_day,\n                       pPeriodEnd=max_day,\n                       pHolidays=DK_holidays_on_weekdays,\n                       pDays2Include=\"1\",\n                       pWorkHours=7.4,\n                       pVacationdays2Exclude=0)\n{\n  if (pPeriodEnd > pPeriodStart){\n    TotalDays  = as.numeric(pPeriodEnd -pPeriodStart)\n    TotalHours = 24 * TotalDays\n    WorkDays = TotalDays\n    if (pDays2Include!=\"1\"){\n      hole_weeks = floor(TotalDays/7)\n      surplus_days = TotalDays - 7*hole_weeks\n      \n      add_weekenddays = 0\n      if (surplus_days > 0){\n        weekno = as.numeric(pPeriodStart, format=\"%u\") \n        if ( (weekno < 6) && (weekno + surplus_days)>=7){\n           add_weekends = 2\n        }\n        if ( (weekno == 6) ){\n          add_weekends = 1\n        }\n        if ( (weekno + surplus_days)==6 ) {\n          add_weekends = 1\n        }\n      }\n      \n      WeekendDays = 2*hole_weeks+add_weekenddays\n      \n      WorkDays = TotalDays - WeekendDays\n      if (pDays2Include ==\"3\"){\n        holidays = nrow(pHolidays[ with(pHolidays, date > pPeriodStart & date <= pPeriodEnd), ])\n        WorkDays = TotalDays - WeekendDays - holidays\n      }\n    }\n    if ((pVacationdays2Exclude>0)&&(pVacationdays2Exclude < WorkDays)){\n         WorkDays = WorkDays - pVacationdays2Exclude\n    }\n    if (pVacationdays2Exclude >= WorkDays){\n      WorkDays = 0\n    }\n    WorkHours = pWorkHours * WorkDays  \n  }\n  else {\n    TotalHours = 0\n    WorkHours = 0\n    }\n  result <- list(\"TotalHours\"=TotalHours, \"WorkHours\"=WorkHours)\n  return(result)\n}\n\nshinyServer(function(input, output) {\n  output$oPeriod <- renderPrint({ input$Period })\n  output$oWorkhours <- renderPrint({ input$Workhours })\n  output$oDays2Include <- renderPrint({input$Days2Include})\n  output$oVacationdays2Exclude <- renderPrint({input$Vacationdays2Exclude})\n  output$newPie <- renderPlot({result <- cWorkhours(pPeriodStart=input$Period[1],\n                                                    pPeriodEnd=input$Period[2],\n                                                    pDays2Include=input$Days2Include,\n                                                    pWorkHours=input$Workhours,\n                                                    pVacationdays2Exclude=input$Vacationdays2Exclude)\n                                 # Simple Pie Chart\n                                 SpareTime <- result$TotalHours - result$WorkHours\n                                 slices <- c(result$WorkHours, SpareTime)\n                                 pct <- round(slices/result$TotalHours*100)\n                                 lbls <- c(\"Work hours:\", \"Spare time:\")\n                                 lbls <- paste(lbls, round(slices))\n                                 lbls <- paste(lbls, \"hours or\")\n                                 lbls <- paste(lbls, pct) # add percents to labels \n                                 lbls <- paste(lbls,\"%\",sep=\" \") # ad % to labels\n                                 pie(slices, \n                                 labels = lbls, \n                                 main=\"Work hours and Sparetime within the Work Time Period\")})\n})\n",
    "created" : 1439293381343.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3499858259",
    "id" : "3855EF16",
    "lastKnownWriteTime" : 1439546291,
    "path" : "N:/Coursera/DevelopDataProducts/WorkHours/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}